generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model User {
  id            String              @id @default(cuid())
  name          String?
  email         String              @unique
  image         String?
  emailVerified String?
  userName      String?             @unique
  accounts      Account[]
  sessions      Session[]
  role          String              @default("user")
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  projects      ProjectTechnology[]
}

model Project {
  id            String              @id @default(uuid())
  title         String
  description   String
  imageUrl      String
  technologies  ProjectTechnology[]
  demoUrl       String?
  sourceCodeUrl String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
}

model Technology {
  id        String              @id @default(uuid())
  name      String              @unique
  projects  ProjectTechnology[]
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

model ProjectTechnology {
  projectId    String
  technologyId String
  project      Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  technology   Technology @relation(fields: [technologyId], references: [id], onDelete: Cascade)
  User         User?      @relation(fields: [userId], references: [id])
  userId       String?

  @@id([projectId, technologyId]) // Composite primary key buat many-to-many
}
